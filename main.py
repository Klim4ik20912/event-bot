from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import message, reply_keyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.helper import Helper, HelperMode, ListItem
from cgitb import text
import logging, sqlite3, aiogram, datetime, asyncio, random, keyboard
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
scheduler = AsyncIOScheduler()

random_notif = [
    '—Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ üí§\n –æ–¥–µ–≤–∞–π—Å—è üåå', '—É–∂–µ –Ω–∞ –Ω–æ—Å—É üöÄ \n –≤—Å—Ç–∞–Ω–µ—à—å —Å –∫—Ä–æ–≤–∞—Ç–∏?', '–Ω–∞ –±—ã—Å—Ç—Ä–æ–º —Å—Ç–∞—Ä—Ç–µ. \n –≤—Å–µ –∂–¥—É—Ç —Ç–µ–±—è üèù', '—Ç–∏–∫-—Ç–∞–∫ üåÜ \n —Å–∫–æ—Ä–æ –Ω–∞—á–∏–Ω–∞–µ–º)', '—É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –ø–∏–≤–æ üç∫. \n —Å–æ–≤–µ—Ç—É—é –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è',
    '–≥–∞–¥–∞—é—Ç –≥–¥–µ –∂–µ —Ç—ã üîÆ \n –Ω—É —Å–µ—Ä—å–µ–∑–Ω–æ, —Ç—ã —Å–∫–æ—Ä–æ?', '—É–∂–µ –≤–∫–ª—é—á–∏–ª–∏ –º—É–∑—ã–∫—É üîä \n —É—Å–ø–µ–π –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –∫–æ–ª–æ–Ω–∫–µ'
]

random_greeting = [
    '—Ö–µ–π', '–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–∫—É',
]


db = sqlite3.connect("baza.db")
sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS events (
id INTEGER PRIMARY KEY AUTOINCREMENT,
open INT,
name TEXT,
time TEXT,
comment TEXT,
place TEXT
)""")

sql.execute("""CREATE TABLE IF NOT EXISTS users (
user INT,
events TEXT
)""")
db.commit()

bot = Bot(token='TOKEN')

dp = Dispatcher(bot, storage=MemoryStorage())

cb = CallbackData("id", "text")


class CreateEvent(StatesGroup):
    event = State()
    time = State()
    place = State()
    comment = State()




@dp.message_handler(Command("start"), state=None)
async def welcome(message):
    if message.from_user.id == message.chat.id:
        sql.execute(f"SELECT * FROM users WHERE user = {message.from_user.id}")
        if sql.fetchone() is None:
            sql.execute(f"INSERT INTO users VALUES (?,?)", (message.from_user.id, 'None'))
            db.commit()
        else:
            await message.answer(f"–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —ç—Ç–æ events bot", reply_markup=keyboard.start, parse_mode='Markdown')
    elif message.from_user.id != message.chat.id:
        sql.execute(f"SELECT * FROM users WHERE user = {message.from_user.id}")
        if sql.fetchone() is None:
            await message.reply("–ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ events bot\n–Ω–∞–ø–∏—à–∏ /start –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É")
        else:
            await message.answer(f"–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è events bot",parse_mode='Markdown')


@dp.message_handler(state=CreateEvent.event)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global e_name
        e_name = message.text
        await state.finish()
        await message.answer("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –∏–≤–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2022.07.09.14.30")
        await CreateEvent.time.set()

@dp.message_handler(state=CreateEvent.time)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global e_time
        e_time = message.text
        await state.finish()
        await message.answer("–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Ö–æ–¥–∏—Ç—å –∏–≤–µ–Ω—Ç?")
        await CreateEvent.place.set()

@dp.message_handler(state=CreateEvent.place)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global e_place
        e_place = message.text
        await state.finish()
        await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≤–µ–Ω—Ç—É")
        await CreateEvent.comment.set()

@dp.message_handler(state=CreateEvent.comment)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global e_place
        global e_name
        global e_time
        e_id = random.randint(0, 9999)
        e_comment = message.text
        await state.finish()
        await message.answer(f"üì¢ –∏–≤–µ–Ω—Ç - {e_name} \n –¥–∞—Ç–∞: {e_time} \n –º–µ—Å—Ç–æ: {e_place} \n –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e_comment}")
        sql.execute(f"INSERT INTO events VALUES ({e_id}, {1}, ?,?,?,?)", (e_name, e_time, e_comment, e_place))
        db.commit()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('info_'))
async def check(call: types.CallbackQuery):
    event_id = call.data[call.data.find("_") + 1 : ]
    print(event_id)
    for info in sql.execute(f"SELECT * FROM events WHERE id = {event_id}"):
        isgo = types.InlineKeyboardMarkup()
        igo = types.InlineKeyboardButton('—è –ø–æ–π–¥—É', callback_data=f'isgo_{info[0]}')
        isgo.insert(igo)
        desc_event = f'—Ç—É—Å–æ–≤–∫–∞ - {info[2]} \n {info[3]}  \n place: {info[5]} \n –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {info[4]} \n event_id: {info[0]}'
        await call.message.answer(desc_event, reply_markup=isgo)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('isgo_'))
async def check(call: types.CallbackQuery):
    event_id = call.data[call.data.find("_") + 1:]
    sql.execute(f"UPDATE users SET events = {event_id} WHERE user = {call.from_user.id} ")
    db.commit()
    await call.message.answer('–∑–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö :)', reply_markup=keyboard.start)

@dp.message_handler(content_types=['text'])
async def main(message : types.Message):
    if message.text == '–∏–≤–µ–Ω—Ç—ã':
        for i in sql.execute(f"SELECT events FROM users WHERE user = {message.from_user.id}"):
            some_events = i
            print(some_events[0])
            if some_events[0] != 'None':
                for i in sql.execute(f"SELECT name, id FROM events WHERE id = {some_events[0]}"):
                    event_name = i[0]
                    event_id = i[1]
                    event_but = types.InlineKeyboardMarkup()
                    some_event = types.InlineKeyboardButton(event_name, callback_data=f'info_{event_id}')
                    event_but.insert(some_event)
                    rand_greet = random.choice(random_greeting)
                    await message.answer(f"{rand_greet}, {message.from_user.first_name}. —Ç–≤–æ–∏ —Ç—É—Å–æ–≤–∫–∏:", reply_markup=event_but, parse_mode='Markdown')
                    await message.answer(f"–º–µ–Ω—é", reply_markup=keyboard.events_func, parse_mode='Markdown')
            else:
                await message.answer(f"–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —É —Ç–µ–±—è –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤", reply_markup=keyboard.events_func, parse_mode='Markdown')
    if message.text == 'settings':
        await message.answer(f"{message.from_user.first_name}, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=keyboard.settings, parse_mode='Markdown')
    if message.text == 'back to menu':
        await message.answer(f"–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è events bot", reply_markup=keyboard.start, parse_mode='Markdown')

    if message.text == "—Å–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç":
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")
        await CreateEvent.event.set()

    if message.text == '–æ–±—â–∏–µ –∏–≤–µ–Ω—Ç—ã':
        # some gay function)))
        all_events = types.InlineKeyboardMarkup()
        for i in sql.execute(f"SELECT * FROM events"):
            events_name = i[2]
            events_ids = i[0]
            events_com = i[4]
            print(f'{events_com}, {events_ids},{events_name}')
            print(events_ids)
            some_event = types.InlineKeyboardButton(events_name, callback_data=f'info_{events_ids}')
            all_events.insert(some_event)
        await message.answer(f"–∏–≤–µ–Ω—Ç—ã:", reply_markup=all_events)

    if message.text == 'quit patry':
        sql.execute(f"UPDATE users SET events = 'None' WHERE user = {message.from_user.id}")
        db.commit()
        await message.answer(f"–æ—Ç–ø–∏—Å–∞–ª —Ç–µ–±—è –æ—Ç –∏–≤–µ–Ω—Ç–∞.", reply_markup=keyboard.start)

async def notification():
    print('notification')
    for i in sql.execute(f"SELECT * FROM events"):
        time = i[3]
        event_id = i[0]
        event_name = i[2]
        now = datetime.datetime.now()
        date_time_str = now.strftime("%Y.%m.%d.%H.%M")
        events_time = datetime.datetime.strptime(time,'%Y.%m.%d.%H.%M')
        count = events_time - now
        if int(count.seconds / 3600) <= 1 and int(count.seconds / 3600) > -1:
            for b in sql.execute(f"SELECT user FROM users WHERE events = {event_id}"):
                some_notif = random.choice(random_notif)
                caption = f'üì¢ –∏–≤–µ–Ω—Ç - {event_name}. \n {some_notif} '
                await bot.send_photo(b[0], types.InputFile('img/notif.jpg'), caption=(caption), parse_mode='Markdown')
        else:
            print('–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π :(')



async def on_startup(dp):
    # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    scheduler.add_job(notification, "interval", minutes=60)
    print('–±–æ—Ç –∑–∞–ø—É—â–µ–Ω')


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)
